"""Add the inference table.

A record will be added when files are uploaded for a deployment-date. When an
inferencing task runs it will look for incolmplete records not claimed by
another task, and process them.

Revision ID: c4f54844b4de Revises: 6619fb7ae00f Create Date: 2025-10-27
11:41:20.851645

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlmodel.sql import sqltypes


# revision identifiers, used by Alembic.
revision: str = 'c4f54844b4de'
down_revision: Union[str, Sequence[str], None] = '6619fb7ae00f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'inference',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('deployment_id', sa.Integer(), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column('task_arn', sqltypes.AutoString(),
                  nullable=True),
        sa.Column(
            'completed',
            sa.Boolean(),
            server_default=sa.text('false'),
            nullable=False
        ),
        sa.Column(
            'deleted',
            sa.Boolean(),
            server_default=sa.text('false'),
            nullable=False
        ),
        sa.ForeignKeyConstraint(
            ['deployment_id'],
            ['deployment.id'],
            name=op.f('fk_inference_deployment_id_deployment')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_inference'))
    )
    op.create_index(
        op.f('ix_inference_deployment_id'),
        'inference',
        ['deployment_id'],
        unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_inference_deployment_id'), table_name='inference')
    op.drop_table('inference')
    # ### end Alembic commands ###
