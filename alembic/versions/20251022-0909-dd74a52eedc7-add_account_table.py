"""Adds an account table and an initial root account.

Revision ID: dd74a52eedc7
Revises: c33af8c4cbd4
Create Date: 2025-10-22 09:08:08.002696

"""
import os
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlmodel.sql import sqltypes

from app.auth import hash_password
from app.constants import Role

# revision identifiers, used by Alembic.
revision: str = 'dd74a52eedc7'
down_revision: Union[str, Sequence[str], None] = 'c33af8c4cbd4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Adjusted by adding default=False to disabled and deleted.
    account = op.create_table(
        'account',
        sa.Column('name', sqltypes.AutoString(), nullable=False),
        sa.Column('organisation_name', sqltypes.AutoString(), nullable=True),
        sa.Column('email', sqltypes.AutoString(), nullable=False),
        sa.Column('hash', sa.LargeBinary(), nullable=False),
        sa.Column('role', sqltypes.AutoString(), nullable=False),
        sa.Column(
            'disabled',
            sa.Boolean(),
            server_default=sa.text('false'),
            nullable=False
        ),
        sa.Column(
            'deleted',
            sa.Boolean(),
            server_default=sa.text('false'),
            nullable=False
        ),
        sa.ForeignKeyConstraint(
            ['organisation_name'],
            ['organisation.name'],
            name=op.f('fk_account_organisation_name_organisation')
        ),
        sa.PrimaryKeyConstraint('name', name=op.f('pk_account'))
    )

    op.create_index(op.f('ix_account_organisation_name'), 'account',
                    ['organisation_name'], unique=False)
    # ### end Alembic commands ###

    try:
        # Create initial account
        name = os.environ['INITIAL_ACCOUNT_NAME']
        password = os.environ['INITIAL_ACCOUNT_PASS']
        hash = bytes(hash_password(password))
        email = os.environ['INITIAL_ACCOUNT_EMAIL']
        role = Role.ROOT.value
        print(f"Creating initial account, {name}")
        op.execute(
            account.insert().values(
                name=name,
                email=email,
                hash=hash,
                role=role
            )
        )
    except Exception as e:
        print(f"Error creating initial account: {e}")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_account_organisation_name'), table_name='account')
    op.drop_table('account')
    # ### end Alembic commands ###
